public class Modifier {
    public static void main(String[] args) {
        /*
        ** 패키지
            * 패키지
                - 자바에서 패키지란 클래스와 인터페이스의 집합을 의미합니다.
                - 이렇게 서로 관련이 있는 클래스나 인터페이스를 함께 묶음으로써 파일을 효율적으로 관리할 수 있게 됩니다.
                - 또한 협업 시 서로 작업한 클래스 사이에서 발생할 수 있는 이름 충돌 문제까지도 패키지를 이용하면 피할 수 있습니다.
                - 자바에서 패키지는 물리적으로 하나의 디렉터리를 의미합니다.
                - 따라서 하나의 패키지에 속한 클래스나 인터페이스 파일은 모두 해당 패키지 이름의 디렉터리에 포함되어 있습니다.
                - 이러한 패키지는 다른 패키지를 포함할 수 있으며, 이때 디렉터리의 계층 구조는 점으로 구분됩니다.

                - 다음 예제는 자바에서 가장 많이 사용되는 패키지 중 하나인 String 클래스의 패키지 이름 입니다.
                예제
                java.lang.String
                - 위의 예제에서 자바의 String 클래스는 java.lang 패키지에 속한 클래스라는 것을 알 수 있습니다.

            * 패키지의 선언
                - 자바에서 패키지를 선언하는 방법은 다음과 같습니다.
                문법
                package 패키지이름;
                - 위와 같은 명령문을 클래스나 인터페이스의 소스 파일에 추가하기만 하면 됩니다.
                - 이때 패키지 이름에는 패키지의 경로까지 포함한 풀네임을 명시해야합니다.

            * 이름 없는 패키지
                - 자바의 모든 클래스는 반드시 하나 이상의 패키지에 포함되어야 합니다.
                - 하지만 자바 컴파일러는 소스 파일에 어떠한 패키지의 선언도 포함되지 않으면, 기본적으로 이름 없는패키지에 포함해 컴파일합니다.
                - 따라서 패키지를 명시하지 않은 모든 클래스와 인터페이스는 모두 같은 패키지에 포함되게 됩니다.

            * import문
                - 위와 같이 선언한 패키지에 속한 클래스를 다른 파일에서 사용하기 위해서는 클래스 이름 앞에 패키지의 경로까지 포함한 풀 네임을 명시해 사용해야 합니다.
                - 하지만 클래스를 사용할 때마다 매번 이렇게 긴 이름을 사용하는 것은 비효율적이므로, 자바에서는 import 키워드를 별도로 제공하고 있습니다.

                - import 문은 자바 컴파일러에 코드에서 사용할 클래스의 패키지에 대한 정보를 미리 제공하는 역할을 합니다.
                - 따라서 import 문을 사용하면 다른 패키지에 속한 클래스를 패키지 이름을 제외한 클래스 이름만으로 사용할 수 있게 됩니다.

            * import 문의 선언
                - 자바에서 import문은 다음과 같이 선언할 수 있습니다.
                문법
                1. import 패키지이름.클래스이름;
                2. import 패키지이름.*;

                - 패키지 이름에는 패키지의 경로까지 포함한 풀 네임을 명시해야 합니다.
                - 첫 번째 방법은 해당 패키지의 특정 클래스만을 사용하고자 할 떄 사용합니다.
                - 두 번째 방법은 해당 패키지의 모든 클래스를 클래스 이름만으로 사용하고 싶을 떄 사용합니다.

            * import 문의 특징
                - import문을 선언할 때 별표(*)를 사용하는 것이 해당 패키지에 포함된 다른 모든 하위 패키지의 클래스까지 포함해 주는 것은 아닙니다.
                - 또한 자바에서는 가장 많이 사용하는 java.lang 패키지에 대해서는 import 문을 사용하지 않아도 클래스 이름만으로 사용할 수 있도록 해주고 있습니다.

        ** 접근제어자
            * 제어자
                - 제어자란 클래스와 클래스 멤버의 선언 시 사용하여 부가적인 의미를 부여하는 키워드를 의미합니다.
                - 자바에서 제어자는 접근 제어자와 기타 제어자로 구분할 수 있습니다.
                - 기타 제어자는 경우에 따라 여러 개를 함께 사용할 수도 있지만, 접근 제어자를 두개 이상 같이 사용할 수는 없습니다.
                - 이러한 접근 제어자와 기타 제어자는 조합에 다라 함께 사용할 수 있습니다.

            * 접근 제어자
                - 객체 지향에서 정보 은닉이란 사용자가 굳이 알 필요가 없는 정보는 사용자로부터 숨겨야 한다는 개념입니다.
                - 그렇게 함으로써 사용자는 언제나 최소한의 정보만으로 프로그램을 손쉽게 사용할 수 있게 됩니다.
                - 자바에서는 이러한 정보 은닉을 위해 접근 제어자라는 기능을 제공하고 있습니다.
                - 접근 제어자를 사용하면 클래스 외부에서의 직접적인 접근을 허용하지 않는 멤버를 설정하여 정보 은닉을 구체화할 수 있습니다.

                - 자바에서는 다음과 같은 네가지의 접근 제어자를 제공합니다.
                1. private
                2. public
                3. default
                4. protected

            * private 접근 제어자
                - private 접근 제어자를 사용하여 선언된 클래스 멤버는 외부에 공개되지 않으며, 외부에서는 직접 접근할 수 없습니다.
                - 즉, 자바 프로그램은 private 멤버에 직접 접근할 수 없으며, 해당 객체의 public 메소드를 통해서만 접근할 수 있습니다.
                - 따라서 private 멤버는 public 인터페이스를 직접 구성하지 않고, 클래스 내부의 세부적인 동작을 구현하는 데 사용됩니다.

                - private 멤버는 해당 멤버를 선언한 클래스에서만 접근할 수 있습니다.

            * public 접근 제어자
                - public 접근 제어자를 사용하여 선언된 클래스 멤버는 외부로 공개되며, 해당 객체를 사용하는 프로그램 어디에서나 직접 접근할 수 있습니다.
                - 자바 프로그램은 public 메소드를 통해서만 해당 객체의 private 멤버에 접근할 수 있습니다.
                - 따라서 public 메소드는 private 멤버와 프로그램 사이의 인터페이스 역할 을 수행한다고 할 수 있습니다.

                - public 멤버는 프로그램 어디에서 누구나 접근할 수 있습니다.

            * default 접근 제어
                - 자바에서는 클래스 및 클래스 멤버의 접근 제어의 기본값으로 default 접근 제어를 별도로 명시하고 있습니다.
                - 이러한 default를 위한 접근 제어자는 따로 존재하지 않으며, 접근 제어자가 지정되지 않으면 자동적으로 default 접근 제어를 가지게 됩니다.
                - default 접근 제어를 가지는 멤버는 같은 클래스의 멤버와 같은 패키지에 속하는 멤버에서만 접근할 수 있습니다.

                - default 멤버는 같은 패키지에 속하는 클래스에서만 접근할 수 있습니다.


            * protected 접근 제어자
                - 자바 클래스는 private 멤버로 정보를 은닉하고, public 멤버로 사용자나 프로그램과의 인터페이스를 구축합니다.
                - 여기에 부모 클래스와 관련된 접근 제어자가 하나 더 존재합니다.
                - protected 멤버는 부모 클래스에 대해서는 public 멤버처럼 취급되며, 외부에서는 private 멤버처럼 취급됩니다.

                - 클래스의 protected 멤버에 접근할 수 있는 영역은 다음과 같습니다.
                1. 이 멤버를 선언한 클래스의 멤버
                2. 이 멤버를 선언한 클래스가 속한 패키지의 멤버
                3. 이 멤버를 선언한 클래스를 상속받은 자식 클래스의 멤버

                - protected 멤버는 같은 패키지에 속하는 클래스와 다른 패키지에 속하는 자식 클래스에서만 접근할 수 있습니다.

            ** 기타 제어자
                * final 제어자
                    - 자바에서 final 제어자는 변경할 수 없다 는 의미로 사용됩니다.
                    - 즉, 필드나 지역변수에 사용하면 값을 변경할 수 없는 상수가 됩니다.
                    - 또한 클래스에 사용하면 해당 클래스는 다른 클래스가 상속받을 수 없게 됩니다.
                    - 메소드에 사용하면 해당 메소드는 오버라이딩을 통한 재정의를 할 수 없게 됩니다.

                    - 자바에서 final 제어자를 사용할 수 있는 대상은 다음과 같습니다.
                    - 클래스, 메소드, 필드, 지역 변수

                * static 제어자
                    - 자바에서 static 제어자는 공통적인이라는 의미로 사용됩니다.
                    - 즉, static 제어자를 변수에 사용하면 해당 변수를 클래스 변수로 만들어 줍니다.
                    - 또한 메소드에 사용하면 해당 메소드를 클래스 메소드로 만들어 줍니다.
                    - 이러한 static 제어자는 초기화 블록에도 사용할 수 있습니다.
                    - static 제어자를 가지는 멤버는 다음과 같은 특징을 가지게 됩니다.

                    1. 프로그램 시작시 최초에 단 한번만 생성되고 초기화 됩니다.
                    2. 인스턴스를 생성하지 않고도 바로 사용할 수 있게 됩니다.
                    3. 해당 클래스의 모든 인스턴스가 공유합니다.

                    - 자바에서 static 제어자를 사용할 수 있는 대상은 다음과 같습니다.
                    - 메소드, 필드, 초기화 블록

                * abstract 제어자
                    - 자바에서 abstract 제어자는 추상적인 이라는 의미로 사용됩니다.
                    - 선언부만 있고 구현부가 없는 메소드를 추상 메소드라 하며, 반드시 abstract 제어자를 붙여야 합니다.
                    - 또한, 하나 이상의 추상 메소드가 포함하고 있는 추상 클래스도 반드시 abstract제어자를 붙여야합니다.

                    - 자바에서 abstract제어자를 사용할 수 있는 대상은 다음과 같습니다.
                    - 클래스, 메소드

                * 제어자의 조합
                    - 자바에서는 접근 제어자와 기타 제어자를 한 대상에 함께 사용할 수 있습니다.
                    - 하지만 모든 경우가 가능한 것은 아니며, 대상에 따라 사용할 수 있는 조합은 다음과 같습니다.
                    - 클래스 : public, default, final, abstract
                    - 메소드 : 모든 접근 제어자, final, static, abstract
                    - 필드 : 모든 접근 제어자, final, static
                    - 지역 변수 : final
                    - 초기화 블록 : static

                    - 또한 자바에서는 제어자의 특성상 몇몇 제어자는 함께 사용할 수 없습니다.
                    1. 클래스에 final과 abstract는 함께 사용할 수 없습니다.
                        - final 제어자를 가지는 클래스는 다른 클래스가 상속받을 수 없게 되며, abstract 제어자를 가지는 클래스는 다른 클래스가 상속해서 오버라이딩해야만 사용할 수 있으므로,
                        - 이 두 제어자는 클래스에 함께 사용할 수 없습니다.
                    2. 메소드에 static과 abstract는 함께 사용할 수 없습니다.
                        - abstract 제어자를 가지는 메소드는 선언부만 있고 구현부가 없는 메소드인데, static 제어자를 가지는 메소드는 인스턴스를 생성하지 않고도 바로 사용할 수 있어야 하므로, 이 두 제어자는 메소드에 함께 사용할 수 없습니다.
                    3.메소드에 private과 abstract는 함께 사용할 수 없습니다.
                        - abstract 제어자를 가지는 메소드는 다른 클래스가 상속하여 오버라이딩해야만 사용할 수 있는데, private 제어자를 가지는 메소드는 자식 클래스에서 접근할 수 없게 되므로, 이 두 제어자는 메소드에 함께 사용할 수 없습니다.
                    4. 메소드에 private과 final은 함께 사용할 필요가 없습니다.
                        - 메소드에 사용된 final 제어자와 private 제어자는 모두 해당 메소드가 오버라이딩을 통한 재정의를 할 수 없다는 의미를 가지므로, 둘 중에 하나만 사용해도 의미가 충분히 전달될 수 있습니다.
         */
    }
}
