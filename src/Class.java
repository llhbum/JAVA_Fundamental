import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

public class Class {
    public static void main(String[] args) {
        /*
        ** 클래스의 개념
            *객체지향프로그래밍(OOP)
                - 객체 지향 프로그래밍에서는 모든 데이터를 객체로 취급하며, 이러한 객체가 바로 프로그래밍의 중심이 됩니다.
                - 객체란 간단히 이야기하자면 실생활에서 우리가 인식할 수 있는 사물로 설명할 수 있습니다.
                - 이러한 객체의 상태와 행동을 구체화하는 형태의 프로그래밍이 바로 객체 지향 프로그래밍입니다.
                - 이떄 객체를 만들어 내기 위한 설계도와 같은 개념을 클래스라고 합니다.

            * 클래스
                - 자바에서 클래스란 객체를 정의하는 틀 또는 설계도와 같은 의미로 사용됩니다.
                - 자바에서는 이러한 설계도인 클래스를 가지고, 여러 객체를 생성하여 사용하게 됩니다.

                - 클래스는 객체의 상태를 나타내는 필드와 객체의 행동을 나타내는 메소드로 구성됩니다.
                - 즉 필드(Field)란 클래스에 포함된 변수를 의미합니다.
                - 또한 메소드란(method)란 어떠한 특정 작업을 수행하기 위한 명령문의 집합이라 할 수 있습니다.

            * 인스턴스
                - 자바에서 클래스를 사용하기 위해서는 우선 해당 클래스 타입의 객체를 선언해야 합니다.
                - 이렇게 클래스로부터 객체를 선언하는 과정을 클래스의 인스턴스 화라고 합니다.
                - 또한 이렇게 선언된 해당 클래스 타입의 객체를 인스턴스라고 합니다.
                - 즉, 인스턴스란 메모리에 할당된 객체를 의미합니다.

                - 자바에서는 하나의 클래스로 부터 여러 개의 인스턴스를 생성할 수 있습니다.
                - 이렇게 생성된 인스턴스는 독립된 메모리 공간에 저장된 자신만의 필드를 가질 수 있습니다.
                - 하지만 해당 클래스의 모든 메소드는 해당 클래스에서 생성된 모든 인스턴스가 공유하게 됩니다.

            * 클래스의 예
                - 클래스 : 차 : 설계도
                - 필드 : 모델, 색상, 연식, 제로백
                - 메소드 : 악셀, 블레이크
                - 인스턴스 : 내차, 친구차, 엄마차, 아빠차, 형차

                - 즉, 자동차 인스턴스는 모두 위와 같은 필드와 메소드를 가지게 될 것입니다.
                - 하지만 각 인스턴스마다 가지고 있는 프로퍼티의 값은 전부 다를 것입니다.

            * 메소드
                - 자바에서 클래스는 멤버로 속성을 표현하는 필드와 기능을 표현하는 메소드를 가집니다.
                - 그중에서 메소드란 어떠한 특정 작업을 수행하기 위한 명령문의 집합이라 할 수 있습니다.
                - 자바에서 메소드를 정의하는 방법은 다음과 같습니다.

                접근제어자 반환타입 메소드이름(매개변수목록) { // 선언부
                    // 구현부
                }
                1. 접근 제어자 : 해당 메소드에 접근할 수 있는 범위를 명시합니다.
                2. 반환 타입 : 메소드가 모든 작업을 마치고 반환하는 데이터의 타입을 명시합니다.
                3. 메소드 이름 : 메소드를 호출하기 위한 이름을 명시합니다.
                4. 매개변수 목록 : 메소드 호출 시에 전달되는 인수의 값을 저장할 변수들을 명시합니다.
                5. 구현부 : 메소드의 고유 기능을 수행하는 명령문의 집합입니다.

                - 자바에서는 하나의 클래스에 같은 이름의 메소드를 둘 이상 정의할 수 없습니다.
                - 하지만 메소드 오버로딩을 이용하면, 같은 이름의 메소드를 중복하여 정의할 수 있습니다.
                - 메소드 오버로딩이란 매개변수의 개수나 타입을 다르게 하여 같은 이름의 또 다른 메소드를 작성하는 것입니다.

                - 이러한 메소드 오버로딩을 사용함으로써 메소드에 사용되는 이름을 절약할 수 있습니다.
                - 또한 메소드를 호출할 때 전달해야 할 매개 변수의 타입이나 개수에 대해 크게 신경쓰지 않고 호출할 수 있게 됩니다.

         ** 클래스의 구성
            * 클래스의 구성 요소
                - 자바에서 클래스는 멤버(member)로 속성을 표현하는 필드(field)와 기능을 표현하는 메소드(method)를 가집니다.
                - 또한, 클래스는 생성된 객체의 필드를 초기화해주는 특별한 메소드인 생성자(constructor)를 가집니다.
            * 필드
                - 클래스의 필드(field)란 클래스에 포함된 변수(variable)를 의미합니다.
                - 클래스 내에서 필드는 선언된 위치에 따라 다음과 같이 구분됩니다.
                1. 클래스 변수
                2. 인스턴스 변수
                3. 지역 변수

            * 메소드
                - 클래스에서 메소드(method)란 어떠한 특정 작업을 수행하기 위한 명령문의 집합이라 할 수 있습니다.
                - 즉, 메소드를 사용하면 중복되는 코드의 반복적인 프로그래밍을 피할 수 있게 됩니다.
                - 또한, 모듈화로 인해 전체적인 코드의 가독성이 좋아집니다.
                - 그리고 프로그램에 문제가 발생하거나 기능의 변경이 필요할 때도 손쉽게 유지보수를 할 수 있게 됩니다.

            * 생성자
                - 클래스를 가지고 객체를 생성하면, 해당 객체는 메모리에 즉시 생성됩니다.
                - 하지만 이렇게 생성된 객체는 모든 인스턴스 변수가 아직 초기화되지 않은 상태입니다.
                - 따라서 자바에서는 객체의 생성과 동시에 인스턴스 변수를 원하는 값으로 초기화할 수 있는 생성자(constructor)라는 메소드를 제공합니다.
                - 자바에서 생성자(constructor)의 이름은 해당 클래스의 이름과 같아야 합니다.
                - 즉, Car 클래스의 생성자는 Car()가 됩니다.

        ** 클래스의 선언
            * 클래스의 선언
                - 클래스란 객체 지향 프로그래밍의 추상화라는 개념을 직접 구현한 것이라 할 수 있습니다.
                - 자바에서는 개발자의 편의를 위해 유용하게 사용할 수 있는 많은 수의 클래스를 미리 정의하여 제공하고 있습니다.
                - 또한, 개발자가 원하는 동작을 하는 새로운 클래스를 손쉽게 작성할 수도 있습니다.
                - 자바에서 클래스는 다음과 같이 선언합니다.

                접근제어자 class 클래스이름 {
                    접근제어자 필드1의타입 필드1의이름;
                    접근제어자 필드2의타입 필드2의이름;
                    ...
                    접근제어자 메소드1의 원형
                    접근제어자 메소드2의 원형
                    ...
                };
                - 접근 제어자는 객체지향 프로그래밍의 특징 중 하나인 정보 은닉을 위한 키워드입니다.
                - public 멤버는 모든 객체에서 접근할 수 있지만, private 멤버는 해당 객체내의 멤버 변수나 메소드만이 접근할 수 있습니다.

            * 인스턴스 생성
                - 선언 : 클래스이름 객체참조변수이름;
                - 그 후로 new 키워드를 사용하여 인스턴스를 생성하고, 해당 인스턴스의 주소를 미리 선언한 참조 변수에 저장하여 사용합니다.
                - 선언 : 객체참조변수이름 = new 클래스이름();

                - 또한, 다음과 같이 참조 변수의 선언과 인스턴스의 생성을 동시에 할 수도 있습니다.
                - 선언 : 클래스이름 객체참조변수이름 = new 클래스이름();
         */

   }
}
